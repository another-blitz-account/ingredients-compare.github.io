{"version":3,"sources":["modules/IngredientList.tsx","utils/compare.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ListItem","props","List","Item","Content","content","IngredientList","state","this","items","length","Header","as","map","item","Segment","divided","ordered","relaxed","React","Component","WeakString","s","toLowerCase","replace","trimString","trim","INGREDIENT_REGEX","LEADING_SPACE_REGEX","App","firstTextValue","secondTextValue","event","setState","target","value","listA","listB","intersection","onlyInA","onlyInB","setB","Set","console","log","filter","x","has","intersectionSet","compareLists","match","Container","style","paddingTop","Grid","columns","Row","textAlign","Icon","name","color","Column","Form","TextArea","onChange","handleFirstTextChanged","bind","resize","height","backgroundColor","placeholder","handleSecondTextChanged","sort","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a29890d.chunk.js","sourcesContent":["import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { List, Segment, Header } from 'semantic-ui-react';\nimport './IngredientList.css';\n\nconst ListItem = (props: { content: string }) => (\n  <List.Item>\n    <List.Content>{props.content}</List.Content>\n  </List.Item>\n)\n\ninterface IProps {\n  items: string[]\n}\ninterface IState {}\n\nexport class IngredientList extends React.Component<IProps, IState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const content = this.props.items.length === 0\n      ? (<Header as=\"h5\">There's nothing here</Header>)\n      : this.props.items.map(item => <ListItem content={item} />);\n\n    return (\n      <Segment>\n        <List divided ordered relaxed>\n          {content}\n        </List>\n      </Segment>\n    )\n  }\n}","interface Comparison {\n  intersection: string[];\n  onlyInA: string[];\n  onlyInB: string[];\n}\n\nconst WeakString = (s: string): string => s.toLowerCase().replace(' ', '');\n\nexport function compareLists(listA: string[], listB: string[]): Comparison {\n  if (listA.length === 0 || listB.length ===0)\n    return { intersection: [], onlyInA: [], onlyInB: [] }\n\n  // const setA = new Set(listA.map(s => WeakString(s)));\n  const setB = new Set(listB.map(s => WeakString(s)));\n  console.log('listA, setB', listA, setB);\n  const intersection = listA.filter(x => setB.has(WeakString(x)));\n  const intersectionSet = new Set(intersection.map(x => WeakString(x)));\n\n  const onlyInA = listA.filter(x => !intersectionSet.has(WeakString(x)));\n  const onlyInB = listB.filter(x => !intersectionSet.has(WeakString(x)));\n\n  return { intersection, onlyInA, onlyInB }\n}\n\nexport function trimString(s: string) {\n  return s.trim();\n}","import React, { FormEvent } from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { Container, Icon, Form, Grid, Header, Message, Segment, TextArea } from 'semantic-ui-react';\n\nimport { IngredientList } from './modules/IngredientList';\nimport { compareLists, trimString } from './utils/compare';\n\nconst INGREDIENT_REGEX = /([0-9]+.*?[a-zA-Z]+)|[^,]+/g;\nconst LEADING_SPACE_REGEX = /,[ ]*/;\n\n// AppState\ninterface IProps {}\ninterface IState {\n  firstTextValue: string;\n  secondTextValue: string;\n}\nclass App extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      firstTextValue: '',\n      secondTextValue: ''\n    }\n  }\n\n  handleFirstTextChanged(event: any) {\n    this.setState({ firstTextValue: event.target?.value });\n  }\n\n  handleSecondTextChanged(event: any) {\n    this.setState({ secondTextValue: event.target?.value });\n  }\n\n  render() {\n    const listA = (this.state.firstTextValue\n      .replace(LEADING_SPACE_REGEX, ',')\n      .match(INGREDIENT_REGEX) || []).map(trimString);\n    const listB = (this.state.secondTextValue\n      .replace(LEADING_SPACE_REGEX, ',')\n      .match(INGREDIENT_REGEX) || []).map(trimString);\n    const { intersection, onlyInA, onlyInB } = compareLists(listA, listB);\n\n    return (\n      <Container style={{ paddingTop: '1rem' }}>\n        <Grid columns={2}>\n          <Grid.Row>\n            <Header as=\"h1\" textAlign=\"center\">\n              <Icon name=\"gift\" style={{ color: \"#6e8ab5\" }}/>\n              <Header.Content>\n                Compare Ingredients\n                </Header.Content>\n            </Header>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <Form>\n                <Header as=\"h3\">Text A</Header>\n                <TextArea\n                  onChange={this.handleFirstTextChanged.bind(this)}\n                  name=\"firstTextValue\"\n                  value={this.state.firstTextValue}\n                  style={{ resize: 'none', height: '180px', backgroundColor: '#f7f7f7' }}\n                  placeholder='A' />\n              </Form>\n            </Grid.Column>\n            <Grid.Column>\n              <Form>\n              <Header as=\"h3\">Text B</Header>\n                <TextArea\n                  onChange={this.handleSecondTextChanged.bind(this)}\n                  name=\"secondTextValue\"\n                  value={this.state.secondTextValue}\n                  style={{ resize: 'none', height: '180px', backgroundColor: '#f7f7f7' }}\n                  placeholder='B' />\n              </Form>\n            </Grid.Column>\n          </Grid.Row>\n          </Grid>\n          <Grid columns={3}>\n          <Grid.Row>\n            <Grid.Column>\n              <Header as=\"h3\">In A and B</Header>\n              <IngredientList items={intersection.sort()}></IngredientList>\n            </Grid.Column>\n            <Grid.Column>\n              <Header as=\"h3\">Only in A</Header>\n              <IngredientList items={onlyInA.sort()}></IngredientList>\n            </Grid.Column>\n            <Grid.Column>\n              <Header as=\"h3\">Only in B</Header>\n              <IngredientList items={onlyInB.sort()}></IngredientList>\n            </Grid.Column>\n\n          </Grid.Row>\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}