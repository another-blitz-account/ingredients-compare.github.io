{"version":3,"sources":["logo.svg","modules/IngredientList.tsx","modules/HelpMessage.tsx","utils/compare.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ListItem","props","List","Item","Content","content","IngredientList","state","this","items","length","Header","className","as","map","item","Segment","divided","ordered","relaxed","React","Component","HelpMessage","Container","style","marginTop","opacity","WeakString","s","toLowerCase","replace","trimString","trim","INGREDIENT_REGEX","LEADING_SPACE_REGEX","INPUT_PLACEHOLDER","App","firstTextValue","secondTextValue","event","setState","target","value","listA","listB","intersection","onlyInA","onlyInB","setB","Set","filter","x","has","intersectionSet","compareLists","split","join","match","paddingTop","alt","src","logo","width","Grid","stackable","columns","Row","Column","Form","TextArea","onChange","handleFirstTextChanged","bind","name","resize","height","placeholder","handleSecondTextChanged","sort","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06f0b165.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.1a386aca.svg\";","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { List, Segment, Header } from 'semantic-ui-react';\nimport './IngredientList.css';\n\nconst ListItem = (props: { content: string }) => (\n  <List.Item>\n    <List.Content>{props.content}</List.Content>\n  </List.Item>\n)\n\ninterface IProps {\n  items: string[]\n}\ninterface IState {}\n\nexport class IngredientList extends React.Component<IProps, IState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const content = this.props.items.length === 0\n      ? (<Header className=\"empty-message\" as=\"h5\">There's nothing here</Header>)\n      : this.props.items.map(item => <ListItem content={item} />);\n\n    return (\n      <Segment>\n        <List divided ordered relaxed>\n          {content}\n        </List>\n      </Segment>\n    )\n  }\n}","import { Container, Header } from 'semantic-ui-react';\n\nexport default function HelpMessage() {\n  return (\n    <Container style={{ marginTop: '50px', opacity: 0.7 }}>\n      <Header as='h5'>About Ingredients Compare</Header>\n      <p>\n        This tool was created to compare ingredient lists across products.\n        Add some text to A and B (either separated by lines or commas).\n      </p>\n    </Container>\n  )\n}","interface Comparison {\n  intersection: string[];\n  onlyInA: string[];\n  onlyInB: string[];\n}\n\nconst WeakString = (s: string): string => s.toLowerCase().replace(' ', '');\n\nexport function compareLists(listA: string[], listB: string[]): Comparison {\n  if (listA.length === 0 || listB.length ===0)\n    return { intersection: [], onlyInA: [], onlyInB: [] }\n\n  // const setA = new Set(listA.map(s => WeakString(s)));\n  const setB = new Set(listB.map(s => WeakString(s)));\n  const intersection = listA.filter(x => setB.has(WeakString(x)));\n  const intersectionSet = new Set(intersection.map(x => WeakString(x)));\n\n  const onlyInA = listA.filter(x => !intersectionSet.has(WeakString(x)));\n  const onlyInB = listB.filter(x => !intersectionSet.has(WeakString(x)));\n\n  return { intersection, onlyInA, onlyInB }\n}\n\nexport function trimString(s: string) {\n  return s.trim();\n}","import React from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport logo from './logo.svg';\n\nimport { Container, Form, Grid, Header, TextArea, Divider } from 'semantic-ui-react';\n\n// Components\nimport { IngredientList } from './modules/IngredientList';\nimport HelpMessage from './modules/HelpMessage';\n\n// Utilities\nimport { compareLists, trimString } from './utils/compare';\n\nconst INGREDIENT_REGEX = /\\d+[a-zA-Z0-9]+|\\d+.*?[a-zA-Z]+|[^,]+/g;\nconst LEADING_SPACE_REGEX = /,[ ]+/;\nconst INPUT_PLACEHOLDER = `one\ntwo\nthree\n`;\n\n// AppState\ninterface IProps {}\ninterface IState {\n  firstTextValue: string;\n  secondTextValue: string;\n}\nclass App extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      firstTextValue: '',\n      secondTextValue: ''\n    }\n  }\n\n  handleFirstTextChanged(event: any) {\n    this.setState({ firstTextValue: event.target?.value });\n  }\n\n  handleSecondTextChanged(event: any) {\n    this.setState({ secondTextValue: event.target?.value });\n  }\n\n  render() {\n    const listA = (this.state.firstTextValue\n      .split('\\n').join(',') // Handle Multi-line\n      .replace(LEADING_SPACE_REGEX, ',') // Tidy up spaces\n      .match(INGREDIENT_REGEX) || []).map(trimString);\n    const listB = (this.state.secondTextValue\n      .replace(LEADING_SPACE_REGEX, ',')\n      .match(INGREDIENT_REGEX) || []).map(trimString);\n    const { intersection, onlyInA, onlyInB } = compareLists(listA, listB);\n\n    return (\n      <Container style={{ paddingTop: '1rem' }}>\n        <Header as=\"h2\">\n          <img alt=\"logo\" src={logo} style={{ width: '40px' }}/>\n          <Header.Content>\n            Compare Ingredients\n            </Header.Content>\n        </Header>\n        <Grid stackable columns={2}>\n          <Grid.Row>\n            <Grid.Column>\n              <Form>\n                <Header as=\"h3\">Text A</Header>\n                <TextArea\n                  onChange={this.handleFirstTextChanged.bind(this)}\n                  name=\"firstTextValue\"\n                  value={this.state.firstTextValue}\n                  style={{ resize: 'none', height: '180px' }}\n                  placeholder={INPUT_PLACEHOLDER} />\n              </Form>\n            </Grid.Column>\n            <Grid.Column>\n              <Form>\n              <Header as=\"h3\">Text B</Header>\n                <TextArea\n                  onChange={this.handleSecondTextChanged.bind(this)}\n                  name=\"secondTextValue\"\n                  value={this.state.secondTextValue}\n                  style={{ resize: 'none', height: '180px' }}\n                  placeholder={INPUT_PLACEHOLDER} />\n              </Form>\n            </Grid.Column>\n          </Grid.Row>\n          </Grid>\n          <Grid stackable columns={3}>\n          <Grid.Row>\n            <Grid.Column>\n              <Header as=\"h3\">In A and B</Header>\n              <IngredientList items={intersection.sort()}></IngredientList>\n            </Grid.Column>\n            <Grid.Column>\n              <Header as=\"h3\">Only in A</Header>\n              <IngredientList items={onlyInA.sort()}></IngredientList>\n            </Grid.Column>\n            <Grid.Column>\n              <Header as=\"h3\">Only in B</Header>\n              <IngredientList items={onlyInB.sort()}></IngredientList>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        <Grid columns={1}>\n          <Grid.Row>\n            <Grid.Column>\n              <HelpMessage />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}