{"version":3,"sources":["modules/IngredientList.tsx","utils/compare.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ListItem","props","List","Item","Content","content","IngredientList","state","divided","ordered","this","items","map","item","i","React","Component","WeakString","s","toLowerCase","replace","trimString","trim","INGREDIENT_REGEX","LEADING_SPACE_REGEX","App","firstTextValue","secondTextValue","event","setState","target","value","listA","listB","length","intersection","onlyInA","onlyInB","setB","Set","console","log","filter","x","has","intersectionSet","compareLists","match","Container","Grid","columns","Row","Header","as","Column","Form","TextArea","onChange","handleFirstTextChanged","bind","name","style","resize","placeholder","handleSecondTextChanged","sort","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24dbab31.chunk.js","sourcesContent":["import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { List } from 'semantic-ui-react';\n\nconst ListItem = (props: { content: string }) => (\n  <List.Item>\n    <List.Content>{props.content}</List.Content>\n  </List.Item>\n)\n\ninterface IProps {\n  items: string[]\n}\ninterface IState {}\n\nexport class IngredientList extends React.Component<IProps, IState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <List divided ordered>\n        {this.props.items.map((item, i) => <ListItem content={item} />)}\n      </List>\n    )\n  }\n}","interface Comparison {\n  intersection: string[];\n  onlyInA: string[];\n  onlyInB: string[];\n}\n\nconst WeakString = (s: string): string => s.toLowerCase().replace(' ', '');\n\nexport function compareLists(listA: string[], listB: string[]): Comparison {\n  if (listA.length === 0 || listB.length ===0)\n    return { intersection: [], onlyInA: [], onlyInB: [] }\n\n  // const setA = new Set(listA.map(s => WeakString(s)));\n  const setB = new Set(listB.map(s => WeakString(s)));\n  console.log('listA, setB', listA, setB);\n  const intersection = listA.filter(x => setB.has(WeakString(x)));\n  const intersectionSet = new Set(intersection.map(x => WeakString(x)));\n\n  const onlyInA = listA.filter(x => !intersectionSet.has(WeakString(x)));\n  const onlyInB = listB.filter(x => !intersectionSet.has(WeakString(x)));\n\n  return { intersection, onlyInA, onlyInB }\n}\n\nexport function trimString(s: string) {\n  return s.trim();\n}","import React, { FormEvent } from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { Container, Button, Form, Grid, Header, Image, Message, Segment, TextArea } from 'semantic-ui-react';\n\nimport { IngredientList } from './modules/IngredientList';\nimport { compareLists, trimString } from './utils/compare';\n\nconst INGREDIENT_REGEX = /([0-9]+.*?[a-zA-Z]+)|[^,]+/g;\nconst LEADING_SPACE_REGEX = /,[ ]*/;\n\n// AppState\ninterface IProps {}\ninterface IState {\n  firstTextValue: string;\n  secondTextValue: string;\n}\nclass App extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      firstTextValue: '',\n      secondTextValue: ''\n    }\n  }\n\n  handleFirstTextChanged(event: any) {\n    this.setState({ firstTextValue: event.target?.value });\n  }\n\n  handleSecondTextChanged(event: any) {\n    this.setState({ secondTextValue: event.target?.value });\n  }\n\n  render() {\n    const listA = (this.state.firstTextValue\n      .replace(LEADING_SPACE_REGEX, ',')\n      .match(INGREDIENT_REGEX) || []).map(trimString);\n    const listB = (this.state.secondTextValue\n      .replace(LEADING_SPACE_REGEX, ',')\n      .match(INGREDIENT_REGEX) || []).map(trimString);\n    const { intersection, onlyInA, onlyInB } = compareLists(listA, listB);\n\n    return (\n      <Container>\n        <Grid columns={2}>\n          <Grid.Row>\n            <Header as=\"h2\">Compare Ingredients</Header>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <Form>\n                <TextArea\n                  onChange={this.handleFirstTextChanged.bind(this)}\n                  name=\"firstTextValue\"\n                  value={this.state.firstTextValue}\n                  style={{ resize: 'none' }}\n                  placeholder='A' />\n              </Form>\n            </Grid.Column>\n            <Grid.Column>\n              <Form>\n                <TextArea\n                  onChange={this.handleSecondTextChanged.bind(this)}\n                  name=\"secondTextValue\"\n                  value={this.state.secondTextValue}\n                  style={{ resize: 'none' }}\n                  placeholder='B' />\n              </Form>\n            </Grid.Column>\n          </Grid.Row>\n          </Grid>\n          <Grid columns={3}>\n          <Grid.Row>\n            <Grid.Column>\n              <Header as=\"h3\">In A and B</Header>\n              <IngredientList items={intersection.sort()}></IngredientList>\n            </Grid.Column>\n            <Grid.Column>\n              <Header as=\"h3\">Only in A</Header>\n              <IngredientList items={onlyInA.sort()}></IngredientList>\n            </Grid.Column>\n            <Grid.Column>\n              <Header as=\"h3\">Only in B</Header>\n              <IngredientList items={onlyInB.sort()}></IngredientList>\n            </Grid.Column>\n\n          </Grid.Row>\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}